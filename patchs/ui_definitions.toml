[manifest]
version = "0.1.0"
priority = 0


[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''UIBox_button{button = 'options', colour = G.C.ORANGE, minw = 2.65, minh = 1.35, label = {localize('b_options_cap')}, scale = text_scale * 1.2, col = true},'''
position = "before"
payload = '''
UIBox_button{
        id = 'vs', 
        button = "vs_main_menu", 
        colour = G.C.BLUE, 
        minw = 2.65, 
        minh = 1.35, 
        label = {localize('b_versus')}, 
        scale = text_scale * 1.2, 
        col = true, 
        func = 'versus_is_up_to_date'
    }, 
G.F_QUIT_BUTTON and {n=G.UIT.C, config={align = "cm", minw = 0.2}, nodes={}} or nil,
'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''local play_button = {n=G.UIT.C, config={id = 'play_button', align = "tm", minw = 2.5, padding = 0.3, r = 0.1, hover = true, colour = G.C.BLUE, button = "play_cards_from_highlighted", one_press = true, shadow = true, func = 'can_play'}, nodes={'''
position = "at"
payload = '''
local play_button = {n=G.UIT.C, config={id = 'play_button', align = "tm", minw = 2.5, padding = 0.3, r = 0.1, hover = true, colour = G.C.BLUE, button = "lock_highlighted_card", one_press = true, shadow = true, func = 'can_play'}, nodes={
'''
match_indent = true
times = 1

#Update HUD to show opponent's hand, chips, and so on... and remove some normal game functionnalities like options button
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''return {n=G.UIT.ROOT, config = {align = "cm", padding = 0.03, colour = G.C.UI.TRANSPARENT_DARK}, nodes={'''
position = "before"
payload = '''

contents.opponent_round = {
  {
    n = G.UIT.R,
    config = { align = "cm" },
    nodes = {
      {
        n = G.UIT.C,
        config = { id = 'opponent_hud_hands', align = "cm", padding = 0.05, minw = 1.45, colour = temp_col, emboss = 0.05, r = 0.1 },
        nodes = {
          {
            n = G.UIT.R,
            config = { align = "cm", minh = 0.33, maxw = 1.35 },
            nodes = {
              { n = G.UIT.T, config = { text = localize('k_hud_hands'), scale = 0.85 * scale, colour = G.C.UI.TEXT_LIGHT, shadow = true } },
            }
          },
          {
            n = G.UIT.R,
            config = { align = "cm", r = 0.1, minw = 1.2, colour = temp_col2 },
            nodes = {
              { n = G.UIT.O, config = { object = DynaText({ string = {{ ref_table = G.GAME.opponent_current_round, ref_value = 'hands_left' }}, font = G.LANGUAGES['en-us'].font, colours = { G.C.BLUE }, shadow = true, rotate = true, scale = 2 * scale }), id = 'opponent_hand_UI_count' } },
            }
          }
        }
      },
      { n = G.UIT.C, config = { minw = spacing }, nodes = {} },
      {
        n = G.UIT.C,
        config = { align = "cm", padding = 0.05, minw = 1.45, colour = temp_col, emboss = 0.05, r = 0.1 },
        nodes = {
          {
            n = G.UIT.R,
            config = { align = "cm", minh = 0.33, maxw = 1.35 },
            nodes = {
              { n = G.UIT.T, config = { text = localize('k_hud_discards'), scale = 0.85 * scale, colour = G.C.UI.TEXT_LIGHT, shadow = true } },
            }
          },
          {
            n = G.UIT.R,
            config = { align = "cm" },
            nodes = {
              {
                n = G.UIT.R,
                config = { align = "cm", r = 0.1, minw = 1.2, colour = temp_col2 },
                nodes = {
                  { n = G.UIT.O, config = { object = DynaText({ string = { { ref_table = G.GAME.opponent_current_round, ref_value = 'discards_left' } }, font = G.LANGUAGES['en-us'].font, colours = { G.C.RED }, shadow = true, rotate = true, scale = 2 * scale }), id = 'opponent_discard_UI_count' } },
                }
              }
            }
          },
        }
      },
    }
  },
  { n = G.UIT.R, config = { minh = spacing }, nodes = {} },
  {
    n = G.UIT.R,
    config = { align = "cm" },
    nodes = {
      {
        n = G.UIT.C,
        config = { align = "cm", padding = 0.05, minw = 1.45 * 2 + spacing, minh = 1.15, colour = temp_col, emboss = 0.05, r = 0.1 },
        nodes = {
          {
            n = G.UIT.R,
            config = { align = "cm" },
            nodes = {
              {
                n = G.UIT.C,
                config = { align = "cm", r = 0.1, minw = 1.28 * 2 + spacing, minh = 1, colour = temp_col2 },
                nodes = {
                  { n = G.UIT.O, config = { object = DynaText({ string = { { ref_table = G.GAME, ref_value = 'opponent_dollars', prefix = localize('$') } }, maxw = 1.35, colours = { G.C.MONEY }, font = G.LANGUAGES['en-us'].font, shadow = true, spacing = 2, bump = true, scale = 2.2 * scale }), id = 'opponent_dollar_text_UI' } }
                }
              },
            }
          },
        }
      },
    }
  },
}

contents.opponent_hand =
{
  n = G.UIT.R,
  config = { align = "cm", id = 'opponent_hand_text_area', colour = darken(G.C.BLACK, 0.1), r = 0.1, emboss = 0.05, padding = 0.03 },
  nodes = {
    {
      n = G.UIT.C,
      config = { align = "cm" },
      nodes = {
        {
          n = G.UIT.R,
          config = { align = "cm", minh = 1.1 },
          nodes = {
            { n = G.UIT.O, config = { id = 'opponent_hand_name', func = 'opponent_hand_text_UI_set', object = DynaText({ string = { { ref_table = G.GAME.opponent_current_round.current_hand, ref_value = "handname_text" } }, colours = { G.C.UI.TEXT_LIGHT }, shadow = true, float = true, scale = scale * 1.4 }) } },
            { n = G.UIT.O, config = { id = 'opponent_hand_chip_total', func = 'opponent_hand_chip_total_UI_set', object = DynaText({ string = { { ref_table = G.GAME.opponent_current_round.current_hand, ref_value = "chip_total_text" } }, colours = { G.C.UI.TEXT_LIGHT }, font = G.LANGUAGES['en-us'].font, shadow = true, float = true, scale = scale * 1.4 }) } },
            { n = G.UIT.T, config = { ref_table = G.GAME.opponent_current_round.current_hand, ref_value = 'hand_level', scale = scale, colour = G.C.UI.TEXT_LIGHT, id = 'opponent_hand_level', shadow = true } }
          }
        },
        {
          n = G.UIT.R,
          config = { align = "cm", minh = 1, padding = 0.1 },
          nodes = {
            {
              n = G.UIT.C,
              config = { align = "cr", minw = 2, minh = 1, r = 0.1, colour = G.C.UI_CHIPS, id = 'opponent_hand_chip_area', emboss = 0.05 },
              nodes = {
                { n = G.UIT.O, config = { func = 'opponent_flame_handler', no_role = true, id = 'opponent_flame_chips', object = Moveable(0, 0, 0, 0), w = 0, h = 0 } },
                { n = G.UIT.O, config = { id = 'opponent_hand_chips', func = 'opponent_hand_chip_UI_set', object = DynaText({ string = { { ref_table = G.GAME.opponent_current_round.current_hand, ref_value = "chip_text" } }, colours = { G.C.UI.TEXT_LIGHT }, font = G.LANGUAGES['en-us'].font, shadow = true, float = true, scale = scale * 2.3 }) } },
                { n = G.UIT.B, config = { w = 0.1, h = 0.1 } },
              }
            },
            {
              n = G.UIT.C,
              config = { align = "cm" },
              nodes = {
                { n = G.UIT.T, config = { text = "X", lang = G.LANGUAGES['en-us'], scale = scale * 2, colour = G.C.UI_MULT, shadow = true } },
              }
            },
            {
              n = G.UIT.C,
              config = { align = "cl", minw = 2, minh = 1, r = 0.1, colour = G.C.UI_MULT, id = 'opponent_hand_mult_area', emboss = 0.05 },
              nodes = {
                { n = G.UIT.O, config = { func = 'opponent_flame_handler', no_role = true, id = 'opponent_flame_mult', object = Moveable(0, 0, 0, 0), w = 0, h = 0 } },
                { n = G.UIT.B, config = { w = 0.1, h = 0.1 } },
                { n = G.UIT.O, config = { id = 'opponent_hand_mult', func = 'opponent_hand_mult_UI_set', object = DynaText({ string = { { ref_table = G.GAME.opponent_current_round.current_hand, ref_value = "mult_text" } }, colours = { G.C.UI.TEXT_LIGHT }, font = G.LANGUAGES['en-us'].font, shadow = true, float = true, scale = scale * 2.3 }) } },
              }
            }
          }
        }
      }
    }
  }
}

contents.opponent_dollars_chips = {
  n = G.UIT.R,
  config = { align = "cm", r = 0.1, padding = 0, colour = G.C.DYN_UI.BOSS_MAIN, emboss = 0.05, id = 'opponent_row_dollars_chips' },
  nodes = {
    {
      n = G.UIT.C,
      config = { align = "cm", padding = 0.1 },
      nodes = {
        {
          n = G.UIT.C,
          config = { align = "cm", minw = 1.3 },
          nodes = {
            {
              n = G.UIT.R,
              config = { align = "cm", padding = 0, maxw = 1.3 },
              nodes = {
                { n = G.UIT.T, config = { text = localize('k_round'), scale = 0.42, colour = G.C.UI.TEXT_LIGHT, shadow = true } }
              }
            },
            {
              n = G.UIT.R,
              config = { align = "cm", padding = 0, maxw = 1.3 },
              nodes = {
                { n = G.UIT.T, config = { text = localize('k_lower_score'), scale = 0.42, colour = G.C.UI.TEXT_LIGHT, shadow = true } }
              }
            }
          }
        },
        {
          n = G.UIT.C,
          config = { align = "cm", minw = 3.3, minh = 0.7, r = 0.1, colour = G.C.DYN_UI.BOSS_DARK },
          nodes = {
            { n = G.UIT.O, config = { w = 0.5, h = 0.5, object = stake_sprite, hover = true, can_collide = false } },
            { n = G.UIT.B, config = { w = 0.1, h = 0.1 } },
            { n = G.UIT.T, config = { ref_table = G.GAME, ref_value = 'opponent_chips_text', lang = G.LANGUAGES['en-us'], scale = 0.85, colour = G.C.WHITE, id = 'opponent_chip_UI_count', func = 'opponent_chip_UI_set', shadow = true } }
          }
        }
      }
    }
  }
}

contents.opponent_round_won = {
  n = G.UIT.R,
  config = { align = "cm", r = 0.1, padding = 0, colour = G.C.DYN_UI.BOSS_MAIN, emboss = 0.05, id = 'opponent_round_won' },
  nodes = {
    {
      n = G.UIT.C,
      config = { align = "cm", padding = 0.1 },
      nodes = {
        {
          n = G.UIT.C,
          config = { align = "cm", minw = 1.3 },
          nodes = {
            {
              n = G.UIT.R,
              config = { align = "cm", padding = 0, maxw = 1.3 },
              nodes = {
                { n = G.UIT.T, config = { text = localize('k_round'), scale = 0.42, colour = G.C.UI.TEXT_LIGHT, shadow = true } }
              }
            },
            {
              n = G.UIT.R,
              config = { align = "cm", padding = 0, maxw = 1.3 },
              nodes = {
                { n = G.UIT.T, config = { text = localize('b_versus_won'), scale = 0.42, colour = G.C.UI.TEXT_LIGHT, shadow = true } }
              }
            }
          }
        },
        {
          n = G.UIT.C,
          config = { align = "cm", minw = 3.3, minh = 0.7, r = 0.1, colour = G.C.DYN_UI.BOSS_DARK },
          nodes = {
            { n = G.UIT.O, config = { w = 0.5, h = 0.5, object = stake_sprite, hover = true, can_collide = false } },
            { n = G.UIT.B, config = { w = 0.1, h = 0.1 } },
            { n = G.UIT.T, config = { ref_table = G.GAME, ref_value = 'opponent_round_won_text', scale = 0.85, colour = G.C.WHITE, id = 'opponent_round_won_text', func = 'opponent_update_round_won', shadow = true } }
          }
        }
      }
    }
  }
}

contents.round_won = {
  n = G.UIT.R,
  config = { align = "cm", r = 0.1, padding = 0, colour = G.C.DYN_UI.BOSS_MAIN, emboss = 0.05, id = 'player_round_won' },
  nodes = {
    {
      n = G.UIT.C,
      config = { align = "cm", padding = 0.1 },
      nodes = {
        {
          n = G.UIT.C,
          config = { align = "cm", minw = 1.3 },
          nodes = {
            {
              n = G.UIT.R,
              config = { align = "cm", padding = 0, maxw = 1.3 },
              nodes = {
                { n = G.UIT.T, config = { text = localize('k_round'), scale = 0.42, colour = G.C.UI.TEXT_LIGHT, shadow = true } }
              }
            },
            {
              n = G.UIT.R,
              config = { align = "cm", padding = 0, maxw = 1.3 },
              nodes = {
                { n = G.UIT.T, config = { text = localize('b_versus_won'), scale = 0.42, colour = G.C.UI.TEXT_LIGHT, shadow = true } }
              }
            }
          }
        },
        {
          n = G.UIT.C,
          config = { align = "cm", minw = 3.3, minh = 0.7, r = 0.1, colour = G.C.DYN_UI.BOSS_DARK },
          nodes = {
            { n = G.UIT.O, config = { w = 0.5, h = 0.5, object = stake_sprite, hover = true, can_collide = false } },
            { n = G.UIT.B, config = { w = 0.1, h = 0.1 } },
            { n = G.UIT.T, config = { ref_table = G.GAME, ref_value = 'round_won_text', scale = 0.85, colour = G.C.WHITE, id = 'round_won_text', func = 'update_round_won', shadow = true } }
          }
        }
      }
    }
  }
}

if BALATRO_VS_CTX and BALATRO_VS_CTX.network.is_live then 
  --No options button on netplay
  contents.buttons = {
      {n=G.UIT.C, config={align = "cm", r=0.1, colour = G.C.CLEAR, shadow = true, id = 'button_area', padding = 0.2}, nodes={
          {n=G.UIT.R, config={id = 'run_info_button', align = "cm", minh = 1.75, minw = 1.5,padding = 0.05, r = 0.1, hover = true, colour = G.C.RED, button = "run_info", shadow = true}, nodes={
            {n=G.UIT.R, config={align = "cm", padding = 0, maxw = 1.4}, nodes={
              {n=G.UIT.T, config={text = localize('b_run_info_1'), scale = 1.2*scale, colour = G.C.UI.TEXT_LIGHT, shadow = true}}
            }},
            {n=G.UIT.R, config={align = "cm", padding = 0, maxw = 1.4}, nodes={
              {n=G.UIT.T, config={text = localize('b_run_info_2'), scale = 1*scale, colour = G.C.UI.TEXT_LIGHT, shadow = true, focus_args = {button = G.F_GUIDE and 'guide' or 'back', orientation = 'bm'}, func = 'set_button_pip'}}
            }}
          }},
        }}
  }

  --No round and ante info on netplay
 contents.round = {
              {n=G.UIT.R, config={align = "cm"}, nodes={
                {n=G.UIT.C, config={id = 'hud_hands',align = "cm", padding = 0.05, minw = 1.45, colour = temp_col, emboss = 0.05, r = 0.1}, nodes={
                  {n=G.UIT.R, config={align = "cm", minh = 0.33, maxw = 1.35}, nodes={
                    {n=G.UIT.T, config={text = localize('k_hud_hands'), scale = 0.85*scale, colour = G.C.UI.TEXT_LIGHT, shadow = true}},
                  }},
                  {n=G.UIT.R, config={align = "cm", r = 0.1, minw = 1.2, colour = temp_col2}, nodes={
                    {n=G.UIT.O, config={object = DynaText({string = {{ref_table = G.GAME.current_round, ref_value = 'hands_left'}}, font = G.LANGUAGES['en-us'].font, colours = {G.C.BLUE},shadow = true, rotate = true, scale = 2*scale}),id = 'hand_UI_count'}},
                  }}
                }},
                {n=G.UIT.C, config={minw = spacing},nodes={}},
                {n=G.UIT.C, config={align = "cm", padding = 0.05, minw = 1.45, colour = temp_col, emboss = 0.05, r = 0.1}, nodes={
                  {n=G.UIT.R, config={align = "cm", minh = 0.33, maxw = 1.35}, nodes={
                    {n=G.UIT.T, config={text = localize('k_hud_discards'), scale = 0.85*scale, colour = G.C.UI.TEXT_LIGHT, shadow = true}},
                  }},
                  {n=G.UIT.R, config={align = "cm"}, nodes={
                    {n=G.UIT.R, config={align = "cm", r = 0.1, minw = 1.2, colour = temp_col2}, nodes={
                      {n=G.UIT.O, config={object = DynaText({string = {{ref_table = G.GAME.current_round, ref_value = 'discards_left'}}, font = G.LANGUAGES['en-us'].font, colours = {G.C.RED},shadow = true, rotate = true, scale = 2*scale}),id = 'discard_UI_count'}},
                    }}
                  }},
                }},
              }},
              {n=G.UIT.R, config={minh = spacing},nodes={}},
              {n=G.UIT.R, config={align = "cm"}, nodes={
                {n=G.UIT.C, config={align = "cm", padding = 0.05, minw = 1.45*2 + spacing, minh = 1.15, colour = temp_col, emboss = 0.05, r = 0.1}, nodes={
                  {n=G.UIT.R, config={align = "cm"}, nodes={
                    {n=G.UIT.C, config={align = "cm", r = 0.1, minw = 1.28*2+spacing, minh = 1, colour = temp_col2}, nodes={
                      {n=G.UIT.O, config={object = DynaText({string = {{ref_table = G.GAME, ref_value = 'dollars', prefix = localize('$')}}, maxw = 1.35, colours = {G.C.MONEY}, font = G.LANGUAGES['en-us'].font, shadow = true,spacing = 2, bump = true, scale = 2.2*scale}), id = 'dollar_text_UI'}}
                  }},
                  }},
                }},
            }},           
    }

end

'''
match_indent = true
times = 1


[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''return {n=G.UIT.ROOT, config = {align = "cm", padding = 0.03, colour = G.C.UI.TRANSPARENT_DARK}, nodes={
      {n=G.UIT.R, config = {align = "cm", padding= 0.05, colour = G.C.DYN_UI.MAIN, r=0.1}, nodes={
        {n=G.UIT.R, config={align = "cm", colour = G.C.DYN_UI.BOSS_DARK, r=0.1, minh = 30, padding = 0.08}, nodes={
          {n=G.UIT.R, config={align = "cm", minh = 0.3}, nodes={}},
          {n=G.UIT.R, config={align = "cm", id = 'row_blind', minw = 1, minh = 3.75}, nodes={}},
          contents.dollars_chips,
          contents.hand,
          {n=G.UIT.R, config={align = "cm", id = 'row_round'}, nodes={
            {n=G.UIT.C, config={align = "cm"}, nodes=contents.buttons},
            {n=G.UIT.C, config={align = "cm"}, nodes=contents.round}
          }},
        }}
      }}
    }}'''
position = "at"
payload = '''
if BALATRO_VS_CTX and BALATRO_VS_CTX.network.is_live then
  return {
    n = G.UIT.ROOT,
    config = { align = "cm", padding = 0.03, colour = G.C.UI.TRANSPARENT_DARK },
    nodes = {
      {
        n = G.UIT.R,
        config = { align = "cm", padding = 0.05, colour = G.C.DYN_UI.MAIN, r = 0.1 },
        nodes = {
          {
            n = G.UIT.R,
            config = { align = "cm", colour = G.C.DYN_UI.BOSS_DARK, r = 0.1, minh = 30, padding = 0.08 },
            nodes = {
              { n = G.UIT.R, config = { align = "cm", minh = 7 }, nodes = {} },
              {
                n = G.UIT.R, config = { align = "cm", minw = 1.4, padding = 0.5 },
                  nodes = {
                    { n = G.UIT.T, config = { ref_table = BALATRO_VS_CTX.network, ref_value = 'rtt', scale = 0.85, colour = G.C.WHITE, id = 'rtt_id', shadow = true } }
                  }
              },
              { n = G.UIT.R, config = { align = "cm" },             nodes = contents.opponent_round },
              contents.opponent_hand,
              contents.opponent_dollars_chips,
              contents.opponent_round_won,
              {
                n = G.UIT.R,
                config = { align = "cm", r = 0.1, colour = G.C.CLEAR, shadow = true, padding = 0.2 },
                nodes = {
                  {
                    n = G.UIT.R,
                    config = { align = "cm", minh = 1.75, minw = 1.5, padding = 0.05, r = 0.1, hover = true, colour = G.C.RED, shadow = true },
                    nodes = {
                      {
                        n = G.UIT.R,
                        config = { align = "cm", padding = 0, maxw = 1.4 },
                        nodes = {
                          { n = G.UIT.T, config = { text = "OPPONENT", scale = 1.5, colour = G.C.UI.TEXT_LIGHT, shadow = true } }
                        }
                      },
                      {
                        n = G.UIT.R,
                        config = { align = "cm", padding = 0, maxw = 2 },
                        nodes = {
                          { n = G.UIT.T, config = { text = "VS", scale = 1.5, colour = G.C.UI.TEXT_LIGHT, shadow = true, } }
                        }
                      },
                      {
                        n = G.UIT.R,
                        config = { align = "cm", padding = 0, maxw = 1.4 },
                        nodes = {
                          { n = G.UIT.T, config = { text = "PLAYER", scale = 1.5, colour = G.C.UI.TEXT_LIGHT, shadow = true, } }
                        }
                      }
                    }
                  }
                }
              },
              contents.round_won,
              contents.dollars_chips,
              contents.hand,
              {
                n = G.UIT.R,
                config = { align = "cm", id = 'row_round' },
                nodes = {
                  { n = G.UIT.C, config = { align = "cm" }, nodes = contents.buttons },
                  { n = G.UIT.C, config = { align = "cm" }, nodes = contents.round }
                }
              },
            }
          }
        }
      }
    }
  }
else
  return {
    n = G.UIT.ROOT,
    config = { align = "cm", padding = 0.03, colour = G.C.UI.TRANSPARENT_DARK },
    nodes = {
      {
        n = G.UIT.R,
        config = { align = "cm", padding = 0.05, colour = G.C.DYN_UI.MAIN, r = 0.1 },
        nodes = {
          {
            n = G.UIT.R,
            config = { align = "cm", colour = G.C.DYN_UI.BOSS_DARK, r = 0.1, minh = 30, padding = 0.08 },
            nodes = {
              { n = G.UIT.R, config = { align = "cm", minh = 0.3 },                              nodes = {} },
              { n = G.UIT.R, config = { align = "cm", id = 'row_blind', minw = 1, minh = 3.75 }, nodes = {} },
              contents.dollars_chips,
              contents.hand,
              {
                n = G.UIT.R,
                config = { align = "cm", id = 'row_round' },
                nodes = {
                  { n = G.UIT.C, config = { align = "cm" }, nodes = contents.buttons },
                  { n = G.UIT.C, config = { align = "cm" }, nodes = contents.round }
                }
              },
            }
          }
        }
      }
    }
  }
end


'''
match_indent = true
times = 1

#shop: Confirm shop choice
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''{n=G.UIT.R,config={id = 'next_round_button', align = "cm", minw = 2.8, minh = 1.5, r=0.15,colour = G.C.RED, one_press = true, button = 'toggle_shop', hover = true,shadow = true}, nodes = {'''
position = "at"
payload = '''
{n=G.UIT.R,config={id = 'next_round_button', align = "cm", minw = 2.8, minh = 1.5, r=0.15,colour = G.C.RED, one_press = true, button = 'network_wait_for_opponent_action_on_end_shop', hover = true,shadow = true}, nodes = {'''
match_indent = true
times = 1

#shop: Add an id to the reroll button (to be able to remove it after confirm)
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''{n=G.UIT.R, config={align = "cm", minw = 2.8, minh = 1.6, r=0.15,colour = G.C.GREEN, button = 'reroll_shop', func = 'can_reroll', hover = true,shadow = true}, nodes = {'''
position = "at"
payload = '''
{n=G.UIT.R, config={id = 'reroll_shop_button' ,align = "cm", minw = 2.8, minh = 1.6, r=0.15,colour = G.C.GREEN, button = 'reroll_shop', func = 'can_reroll', hover = true,shadow = true}, nodes = {'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''function add_tag(_tag)'''
position = "after"
payload = '''
  if BALATRO_VS_CTX and BALATRO_VS_CTX.network.is_live then
    bvs_debug('there is no blind on netplay, all tags are useless')
    return
  end
'''
match_indent = true
times = 1

#current_blinds: no blind on netplay
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''function G.UIDEF.current_blinds()'''
position = "at"
payload = '''
function G.UIDEF.current_blinds()
  if BALATRO_VS_CTX and BALATRO_VS_CTX.network.is_live then
    return {
              n = G.UIT.ROOT,
              config = { align = "cm", padding = 0.2, colour = G.C.BLACK, r = 0.1, emboss = 0.05, minh = 6, minw = 6 },
              nodes = {
                  {
                      n = G.UIT.T, 
                      config = { 
                          text = "No blind on netplay", scale = 0.5, colour = G.C.UI.TEXT_LIGHT, shadow = true 
                  } },
              }
          }
  end
'''
match_indent = true
times = 1

#create_uiBox_win: No endless mode on netplay
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''{n=G.UIT.R, config={align = "cm", padding = 0.08}, nodes={
      UIBox_button({button = 'exit_overlay_menu', label = {localize('b_endless')}, minw = 6.5, maxw = 5, minh = 1.2, scale = 0.7, shadow = true, colour = G.C.BLUE, focus_args = {nav = 'wide', button = 'x',set_button_pip = true}}),
    }},'''
position = "at"
payload = '''
not (BALATRO_VS_CTX and BALATRO_VS_CTX.network.is_live) and
  {n=G.UIT.R, config={align = "cm", padding = 0.08}, nodes={
    UIBox_button({button = 'exit_overlay_menu', label = {localize('b_endless')}, minw = 6.5, maxw = 5, minh = 1.2, scale = 0.7, shadow = true, colour = G.C.BLUE, focus_args = {nav = 'wide', button = 'x',set_button_pip = true}}),
  }} or nil,
'''
match_indent = true
times = 1

#create_uiBox_win: No new game on netplay
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''not show_win_cta and UIBox_button({id = 'from_game_won', button = 'notify_then_setup_run', label = {localize('b_start_new_run')}, minw = 2.5, maxw = 2.5, minh = 1, focus_args = {nav = 'wide', snap_to = true}}) or nil,'''
position = "at"
payload = '''
not (BALATRO_VS_CTX and BALATRO_VS_CTX.network.is_live) and
  not show_win_cta and UIBox_button({id = 'from_game_won', button = 'notify_then_setup_run', label = {localize('b_start_new_run')}, minw = 2.5, maxw = 2.5, minh = 1, focus_args = {nav = 'wide', snap_to = true}}) or nil
  or nil,
'''
match_indent = true
times = 1

#create_uiBox_game_over: No new game on netplay
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''{n=G.UIT.R, config={id = 'from_game_over', align = "cm", minw = 5, padding = 0.1, r = 0.1, hover = true, colour = G.C.RED, button = "notify_then_setup_run", shadow = true, focus_args = {nav = 'wide', snap_to = true}}, nodes={
            {n=G.UIT.R, config={align = "cm", padding = 0, no_fill = true, maxw = 4.8}, nodes={
              {n=G.UIT.T, config={text = localize('b_start_new_run'), scale = 0.5, colour = G.C.UI.TEXT_LIGHT}}
            }}
          }},'''
position = "at"
payload = '''
not (BALATRO_VS_CTX and BALATRO_VS_CTX.network.is_live) and
  {n=G.UIT.R, config={id = 'from_game_over', align = "cm", minw = 5, padding = 0.1, r = 0.1, hover = true, colour = G.C.RED, button = "notify_then_setup_run", shadow = true, focus_args = {nav = 'wide', snap_to = true}}, nodes={
            {n=G.UIT.R, config={align = "cm", padding = 0, no_fill = true, maxw = 4.8}, nodes={
              {n=G.UIT.T, config={text = localize('b_start_new_run'), scale = 0.5, colour = G.C.UI.TEXT_LIGHT}}
            }}
          }} 
or nil,
'''
match_indent = true
times = 1